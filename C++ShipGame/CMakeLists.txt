cmake_minimum_required(VERSION 3.4)

#Configuration parameters of cmake
set(CMAKE_CXX_COMPILER g++)#requires g++ to be available on PATH
set(CMAKE_C_COMPILER gcc)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

#Set debug profile, also maximum level of debug info g3 and format of debug info to dwarf-4 (requires gdb in version 7)
set(CMAKE_BUILD_TYPE Debug)
if(CMAKE_COMPILER_IS_GNUCC)
    set(CMAKE_C_FLAGS_DEBUG "-g3 -gdwarf-4")
endif()
if(CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS_DEBUG "-g3 -gdwarf-4")
endif()

enable_language(CXX)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_VERBOSE_MAKEFILE TRUE)


project(Game)

#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

set(SOURCE_FILES
	include/Interface.h
    src/Interface.cpp
	include/Computer.h
    src/Computer.cpp
	include/Game.h
    src/Game.cpp
    include/GameStrategy.h
    src/GameStrategy.cpp
	include/GreedyStrategy.h
    src/GreedyStrategy.cpp
	include/Grid.h
    src/Grid.cpp
    include/Human.h
    src/Human.cpp
    include/MultiFunnel.h
    src/MultiFunnel.cpp
    include/OneFunnel.h
    src/OneFunnel.cpp
    include/Player.h
    src/Player.cpp
    include/PrimaryGrid.h
    src/PrimaryGrid.cpp
    include/RandomStrategy.h
    src/RandomStrategy.cpp
    include/SecondaryGrid.h
    src/SecondaryGrid.cpp
    include/Ship.h
    src/Ship.cpp
    src/main.cpp
)

add_library(Game ${SOURCE_FILES})

#add 'include' directory with header files from 'Exercise1' project to paths
target_include_directories(Game PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)

add_executable (GameEXE ${SOURCE_FILES})

#Unit Tests section

# Check if generating Visual Studio 14 2015 project
if(MSVC)
    if(NOT BOOST_ROOT)
        set(BOOST_ROOT "C:/local/boost_1_60_0")
    endif()
    set(Boost_INCLUDE_DIR "${BOOST_ROOT}")
    set(Boost_LIBRARY_DIR "${BOOST_ROOT}/lib32-msvc-14.0")
    set(Boost_USE_STATIC_LIBS ON)
    set(Boost_USE_MULTITHREADED ON)

    if(NOT EXISTS ${Boost_LIBRARY_DIR})
        message(WARNING "Boost library requires manual installation in Windows")
        message("1) Browse: https://sourceforge.net/projects/boost/files/boost-binaries/1.60.0/")
        message("2) Download: boost_1_60_0-msvc-14.0-32.exe")
        message("3) Install into default directory: C:\\local")
        message("")
        message(FATAL_ERROR "Boost libraries not found at ${Boost_LIBRARY_DIR}")
    endif()

    find_package(Boost COMPONENTS unit_test_framework REQUIRED)

    include_directories(${Boost_INCLUDE_DIR})
    link_directories(${Boost_LIBRARY_DIR})

else()
    find_package(Boost COMPONENTS unit_test_framework REQUIRED)
endif()

set(SOURCE_TEST_FILES
    test/master.cpp
    test/ComputerClassTest.cpp
	test/GameClassTest.cpp
    test/GameStrategyClassTest.cpp
    test/GreedyStrategyClassTest.cpp
    test/GridClassTest.cpp
    test/HumanClassTest.cpp
    test/MultiFunnelClassTest.cpp
    test/OneFunnelClassTest.cpp
    test/PlayerClassTest.cpp
    test/PrimaryGridClassTest.cpp
    test/RandomStrategyClassTest.cpp
    test/SecondaryGridClassTest.cpp
    test/ShipClassTest.cpp
	test/InterfaceClassTest.cpp
)



include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${Boost_INCLUDE_DIRS}
)

add_executable (GameTest ${SOURCE_TEST_FILES})

target_link_libraries (GameTest
    Game
    ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY}
)

add_custom_target(check ${CMAKE_COMMAND} -E env CTEST_OUTPUT_ON_FAILURE=1 BOOST_TEST_LOG_LEVEL=all
    ${CMAKE_CTEST_COMMAND} -C $<CONFIG> --verbose
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR})

enable_testing()
add_test(GameTests GameTest)
